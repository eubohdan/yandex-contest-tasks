'''27. Вывести маршрут максимальной стоимости

Ограничение времени	1 секунда
Ограничение памяти	256Mb

В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка. В каждой клетке таблицы
записано некоторое число. Черепашка может перемещаться вправо или вниз, при этом маршрут черепашки
заканчивается в правом нижнем углу таблицы.
Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и
конечную клетку). Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

Формат ввода
В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры
таблицы. Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание
таблицы. Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.
Формат вывода
Первая строка выходных данных содержит максимальную возможную сумму, вторая — маршрут, на котором
достигается эта сумма. Маршрут выводится в виде последовательности, которая должна содержать N-1
букву D, означающую передвижение вниз и M-1 букву R, означающую передвижение направо. Если таких
последовательностей несколько, необходимо вывести ровно одну (любую) из них.

Пример входных данных
5 5
9 9 9 9 9
3 0 0 0 0
9 9 9 9 9
6 6 6 6 8
9 9 9 9 9
'''

n, m = map(int, input().split()) # n строк, m столбцов
lst, route = [], []
for _ in range(n):
    lst.append(list(map(int, input().split())))
dp = [[0] * (m + 1)]
for _ in range(n):
    dp.append([0])
for i in range(n):
    for j in range(m):
        if dp[i+1][j] >= dp[i][j+1]:
            dp[i + 1].append(dp[i+1][j] + lst[i][j])
        else:
            dp[i + 1].append(dp[i][j+1] + lst[i][j])
print(dp[-1][-1])
i, j = n, m
while [i, j] != [1, 1]:
    if dp[i-1][j] >= dp[i][j-1]:
        route.append('D')
        i -= 1
    else:
        route.append('R')
        j -= 1
print(*route[::-1])
