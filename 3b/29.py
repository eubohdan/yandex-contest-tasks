'''29. Кафе

Ограничение времени	1 секунда
Ограничение памяти	64Mb

Около Петиного университета недавно открылось новое кафе, в котором действует следующая система скидок:
при каждой покупке более чем на 100 рублей покупатель получает купон, дающий право на один бесплатный
обед (при покупке на сумму 100 рублей и меньше такой купон покупатель не получает).

Однажды Пете на глаза попался прейскурант на ближайшие N дней. Внимательно его изучив, он решил, что
будет обедать в этом кафе все N дней, причем каждый день он будет покупать в кафе ровно один обед.
Однако стипендия у Пети небольшая, и поэтому он хочет по максимуму использовать предоставляемую
систему скидок так, чтобы его суммарные затраты были минимальны. Требуется найти минимально возможную
суммарную стоимость обедов и номера дней, в которые Пете следует воспользоваться купонами.

Формат ввода
В первой строке входного файла записано целое число N (0 ≤ N ≤ 100). В каждой из последующих N строк
записано одно целое число, обозначающее стоимость обеда в рублях на соответствующий день. Стоимость —
неотрицательное целое число, не превосходящее 300.

Формат вывода
В первой строке выдайте минимальную возможную суммарную стоимость обедов. Во второй строке выдайте
два числа K1 и K2 — количество купонов, которые останутся неиспользованными у Пети после этих N дней
и количество использованных им купонов соответственно.

В последующих K2 строках выдайте в возрастающем порядке номера дней, когда Пете следует
воспользоваться купонами. Если существует несколько решений с минимальной суммарной стоимостью,
то выдайте то из них, в котором значение K1 максимально (на случай, если Петя когда-нибудь ещё
решит заглянуть в это кафе). Если таких решений несколько, выведите любое из них.'''

n = int(input())
if n:
    prices = [int(input()) for _ in range(n)]
    dp = [[float('inf')] * (n+1) for _ in range(n)]
    if prices[0] > 100 and n > 1:
        dp[0][1] = prices[0]
    else:
        dp[0][0] = prices[0]
    for i in range(n - 1):
        for j in range(n):
            if dp[i][j] != float('inf'):
                if prices[i + 1] <= 100:
                    dp[i + 1][j] = dp[i][j] + prices[i + 1]
                else:
                    dp[i + 1][j + 1] = dp[i][j] + prices[i + 1]
                if j and prices[i+1]:
                    dp[i + 1][j - 1] = min(dp[i][j], dp[i + 1][j - 1])
    k2, j = [], 0 if dp[-1][0] != float('inf') else 1
    for i in range(n-1, 0, -1):
        if dp[i-1][j+1] == dp[i][j] != float('inf'):
            j += 1
            k2.append(i + 1)
        elif prices[i] > 100:
            j -= 1

    res = min(dp[-1])
    print(res)
    print(dp[-1].index(res) if n != 1 else int(bool(res > 100)), len(k2))
    for i in k2[::-1]:
        print(i)
else:
    print('0\n0 0')
