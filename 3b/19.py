'''19. Хипуй

Ограничение времени	2 секунды
Ограничение памяти	64Mb

В этой задаче вам необходимо самостоятельно (не используя соответствующие классы и функции стандартной
библиотеки) организовать структуру данных Heap для хранения целых чисел, над которой определены
следующие операции: a) Insert(k) – добавить в Heap число k ; b) Extract достать из Heap наибольшее
число (удалив его при этом).

Формат ввода
В первой строке содержится количество команд N (1 ≤ N ≤ 100000), далее следуют N команд, каждая
в своей строке. Команда может иметь формат: “0 <число>” или “1”, обозначающий, соответственно,
операции Insert(<число>) и Extract. Гарантируется, что при выполнении команды Extract в структуре
находится по крайней мере один элемент.

Формат вывода
Для каждой команды извлечения необходимо отдельной строкой вывести число, полученное при выполнении
команды Extract.

Пример входных данных
14
0 1
0 345
1
0 4346
1
0 2435
1
0 235
0 5
0 365
1
1
1
1
'''


def push_heap(hl: list, x: int):
    hl.append(x)
    pos = len(hl) - 1
    while pos > 0 and hl[pos] > hl[(pos - 1) // 2]:
        hl[pos], hl[(pos-1) // 2] = hl[(pos-1) // 2], hl[pos]
        pos = (pos - 1) // 2


def pop_heap(hl: list):
    ans = hl[0]
    hl[0] = hl[-1]
    pos = 0
    while pos * 2 + 1 < len(hl) - 1:
        msi = pos * 2 + 1
        if hl[pos * 2 + 2] > hl[msi]:
            msi = pos * 2 + 2
        if hl[pos] < hl[msi]:
            hl[pos], hl[msi] = hl[msi], hl[pos]
            pos = msi
        else:
            break
    hl.pop()
    return ans
heap = []
for _ in range(int(input())):
    x = input()
    if x == '1':
        print(pop_heap(hl=heap))
    else:
        y = int(x.split()[1])
        push_heap(hl=heap, x=y)
